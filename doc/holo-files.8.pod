=encoding UTF-8

=head1 NAME

holo-files - Holo plugin to provision files

=head1 DESCRIPTION

When using Holo, configuration is usually stored in system packages, so files
can be provisioned by just including them in a configuration package. This
plugin extends this basic capability to allow one package (a configuration
package) to overwrite or modify a file that has been installed by another
package (an application package).

=head2 Structure of the resource directory

Configuration packages that want to use this plugin must place files in the
resource directory at F</usr/share/holo/files>. Each B<resource> file works on a
certain B<target>, as determined by its file name:

    /usr/share/holo/files/20-webserver/etc/nginx/nginx.conf
                          \__________/\___________________/
                            |           |
                            |           `-- path to target
                            |
                            `-- disambiguator

The B<disambiguator> is always required, and allows multiple resource files to
operate on the same target (sorted alphabetically by their disambiguator). The
pattern of putting a number at the start of the disambiguator is not required,
but useful to control the ordering of resource files.

Each target file that has such resource files is an B<entity> within Holo. Its entity
ID is C<file:$target> where C<$target> is the absolute path to the target
file.

=head2 Application strategy

Resource files are applied on the B<target base>, the initial version of the
target file that was found during the first C<holo apply> run. This target base
is saved at F</var/lib/holo/files/base/$target>.

How resource files are applied to the target depends on each resource's file
extension:

=over 4

=item C<.holoscript> The resource file is understood to be an executable program
that can be used to modify the target. The target contents (either the original
target base, or the result of a previous resource application) will be piped
through the holoscript program.

This is typically used when the default configuration for an application shall
be used, but with some minor modifications.  The following example uses the
default configuration for L<pacman(8)>, but enables the "Color" and
"TotalDownload" options:

    $ cat /usr/share/holo/files/20-enable-color/etc/pacman.conf.holoscript
    #!/bin/sh
    sed 's/^#\s*Color$/Color/; s/^#\s*TotalDownload$/TotalDownload/'

    $ sudo holo apply file:/etc/pacman.conf

    Working on file:/etc/pacman.conf
      store at /var/lib/holo/files/base/etc/pacman.conf
      passthru /usr/share/holo/files/20-enable-color/etc/pacman.conf.holoscript

This allows the file contents to be modified; however, the file permissions and
ownership are not changed, and are inherited from the target base or the
previous resource application step.

=item C<.patch> The resource file is understood to be a patch file that can be
fed to the L<patch(1)> program.  Some patch formats have the ability to change
file type and file permissions; this is respected, making this is the only
resource format that can change file permissions.

The filename to modify is not passed to L<patch(1)>; instead, a copy of the
target is available as the only file in the directory passed to the C<-d> flag.
This means that the filename used within the patch file must have the same
basename as the entity being operated on.  Any other files that the patch file
may create are ignored.

=item Otherwise, the resource file is a plain file or symlink that will just
overwrite the contents of the target base (and all previous resource application
steps).  The ownership and file permissions are not set from the resource file,
and are inherited from the target base or the previous resource application
step.

=back

When writing the new target file, a copy of the provisioned target file is
written to F</var/lib/holo/files/provisioned/$target> for use by C<holo diff
file:$target>.

In normal operation, holo-files will refuse to operate on a target file that
has been modified or deleted by the user or by another program. Apply
C<--force> to reset the target file to its defined state.

=head2 Handling package upgrades

Each target file is originally installed by an application package. When that
application package is upgraded, system package managers usually detect that
the file has been modified, and store the new version contained in the
application package next to the target file, in paths such as

    $target.rpmnew          # for RPM    (Fedora, Mageia, openSUSE etc.)
    $target.dpkg-dist       # for dpkg   (Debian, Ubuntu etc.)
    $target.pacnew          # for pacman (Arch Linux etc.)
    $target.apk-new         # for APK    (Alpine Linux etc.)

When this happens, the next C<holo apply> run will detect this file and update
its target base with this file:

    $ sudo pacman -Syu
    ...
    installing pacman ...
    warning: /etc/pacman.conf installed as /etc/pacman.conf.pacnew
    ...
    $ sudo holo apply file:/etc/pacman.conf

    Working on file:/etc/pacman.conf
      store at /var/lib/holo/files/base/etc/pacman.conf
      passthru /usr/share/holo/files/20-enable-color/etc/pacman.conf.holoscript

    >> found updated target base: /etc/pacman.conf.pacnew -> /var/lib/holo/files/base/etc/pacman.conf

(Unless disabled, it would not normally be nescessary to manually run C<sudo
holo apply> in the above example, as holo-files provides a pacman hook that
causes pacman to automatically call C<holo apply> to handle C<.pacnew> files.
This is not (yet) true for other package managers.)

This means that when configuration is applied as a holoscript on top of the
default configuration, future updates to the default configuration will
automatically be picked up, as long as C<holo apply> is run after the system update.

When detecting these files, to know which suffixes to look for, holo-files
inspects C<ID> and C<ID_LIKE> in L<os-release(5)> to determine which family the
operating system belongs to, and thus which package manager is used.  It
currently recognizes C<alpine>, C<arch>, C<debian>, C<fedora> and C<suse>.

=head2 Handling package removal

If there exist target bases below F</var/lib/holo/files> for which there are no
corresponding resource files below F</usr/share/holo/files>, these target bases
are considered B<orphaned>.

This usually occurs because a package has been removed from the system, or
because a different package version were installed that do not contain the
resource files in question anymore.

There are two subcases to consider, if only configuration packages were
deleted, C<holo apply> will restore the target base (as installed by the
application package):

    Scrubbing file:/etc/resourcefile-deleted.conf (all repository files were deleted)
      restore /var/lib/holo/files/base/etc/resourcefile-deleted.conf

If the application package (to whom the target file belongs) has also been
deleted, the target base will be deleted instead of restored:

    Scrubbing file:/etc/targetfile-deleted.conf (target was deleted)
       delete /var/lib/holo/files/base/etc/targetfile-deleted.conf

This algorithm ensures that after any number of package installation and
removal operations, a single C<holo apply> will converge all old and new target
files to the desired state.

=head2 Dealing manual changes

C<holo apply> will refuse to work on target files that have been modified by
the user or another program, unless C<--force> is given:

    $ sudo rm /etc/pacman.conf
    $ sudo vim /etc/ssh/sshd_config
    ...
    $ sudo holo apply

    Working on file:/etc/pacman.conf
      store at /var/lib/holo/files/base/etc/pacman.conf
         apply /usr/share/holo/files/01-base/etc/pacman.conf

    !! skipping target: file has been deleted by user (use --force to restore)

    Working on file:/etc/ssh/sshd_config
      store at /var/lib/holo/files/base/etc/ssh/sshd_config
         apply /usr/share/holo/files/10-openssh/etc/ssh/sshd_config

    !! skipping target: file has been modified by user (use --force to restore)

The C<holo diff> command can be used to produce a diff between the last
provisioned and the current state of the target files. C<holo apply --force>
can be used to reset the target files to their defined state.

=head1 SEE ALSO

L<holo(8)> provides the user interface for using this plugin.

L<os-release(5)>

=head1 AUTHOR

Stefan Majewsky

Further documentation is available at the project homepage: L<https://holocm.org>

Please report any issues and feature requests at GitHub: L<https://github.com/holocm/holo/issues>

=cut
