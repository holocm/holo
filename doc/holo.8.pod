=encoding UTF-8

=head1 NAME

holo - minimal configuration management

=head1 SYNOPSIS

holo B<apply> [I<-f|--force>] [I<selector> ...]

holo B<diff> [I<selector> ...]

holo B<scan> [I<-s|--short|-p|--porcelain>] [I<selector> ...]

holo B<help>

holo B<version>

=head1 DESCRIPTION

Holo adds a few sprinkles on top of package management to make it suitable for
basic configuration management tasks. Its prime directive is to have all
configuration statically declared and defined within packages, which can be
installed to add new configuration, or uninstalled to remove configuration from
a system.

Package management already offers 99% of the needed tools: Metapackages
(usually called "holograms" or "holodecks" in Holo) can pull in other packages
as dependencies, thus installing the software required for a certain task, and
contain their own files to configure the software installed. Holo adds tools
that work around shortcomings (from the configuration management perspective)
of the package management.

=head2 Plugins

The C<holo> binary is only a frontend to find and run Holo B<plugins>. Each
Holo plugin adds logic to provision a certain type of thing that package
management cannot do by itself. Please refer to L<holorc(5)> for how to
discover and enable plugins.

Included with Holo is the L<holo-files(8)> plugin that allows holograms to
replace or modify the default configuration files installed by application
packages, the L<holo-ssh-keys(8)> plugin for provisioning
C<.ssh/authorized_keys>, and the L<holo-users-groups(8)> plugin which
provisions user accounts and groups to the standard L<passwd(5)> and
L<group(5)> databases.

=head2 Entities, resource files

Holo calls the things that it works on B<entities>. Each entity belongs to a
certain plugin, since plugins contain all the logic for discovering and working
on entities.

Entities are defined in B<source> or B<resource files> which configuration
packages install into the resource directory of the corresponding plugin (at
F</usr/share/holo/$PLUGIN_ID>). Depending on how the plugin works, a single
entity may have multiple resource files, or a single resource file might define
multiple entities.

Each entity is identified by a name, usually of the form C<type:identifier>.
Refer to the manpage of each plugin for the format for its entities' names.

An entity that was created and still exists, but for which all source files have
been removed, is said to be B<orphaned> or an B<orphan>. Orphaned entities are
removed the next time an apply operation is performed on them.

=head2 Generated resource files

Sometimes, resource files cannot be supplied in a package because their
existence or contents depend on state not known at package build time, e.g. the
set of devices present on the final system or the system's network environment.
In this case, the configuration package can supply a B<generator> that produces
the correct set of resource files when Holo runs.

The interface for generators is described in L<holo-generators(7)>.

=head1 OPERATIONS

All operations act on all entities by default, but can be restricted to certain
entities by giving B<selectors> on the command line. A selector can be either an
entity name (such as C<file:/etc/sddm/sddm.conf>), or the path to a resource
file that defines this entity (such as
C</usr/share/holo/files/40-desktop/etc/sddm/sddm.conf>), or a plugin ID (such
as C<files>). A plugin ID as selector matches all entities known to that
plugin.

=over 4

=item B<scan> [I<-s|--short|-p|--porcelain>] [I<selector> ...]

Prompt all plugins to scan for entities and list all known entities (or, if
selectors are given, all entities matching these selectors) including the
information returned from plugins about these entities.

With C<-s> or C<--short>, only list the entity names.

With C<-p> or C<--porcelain>, show the raw scan report as received from the
plugins. The format is documented in L<holo-plugin-interface(7)>. The format is
more machine-readable and stable, and thus the preferred choice for parsing in
scripts.

=item B<apply> [I<-f|--force>] [I<selector> ...]

Apply the selected (or all) entities. Refer to the manpage of each plugin for
what "applying" entails.

By default, Holo plugins will refuse to provision entities that have been
changed by the user or by other programs. Apply C<-f> or C<--force> to overwrite
such changes or perform otherwise dangerous activities.

If you want to check what will be done, use C<holo scan> as a dry run before
C<holo apply>.

=item B<diff> [I<selector> ...]

Print a L<diff(1)> between the last provisioned version of each selected entity
and the actual contents of that entity.

For entities that are not files, refer to the plugin's manpage for what the
diff contains. When a plugin is not able to produce a meaningful textual
representation of the entity, no output will be produced for its entities.

=item B<help>

Print out usage information.

=item B<version>

Print out Holo's version string including the release name.

=back

=head1 ENVIRONMENT

=over 4

=item C<$TMPDIR> (default: F</tmp>)

Where to place temporary files.

=back

=head1 FILES

=over 4

=item F</etc/holorc> (see L<holorc(5)>)

=item F</etc/holorc.d/*> (see L<holorc(5)>)

=item F</run/holo.pid>

=back

For each plugin:

=over 4

=item F</usr/lib/holo/holo-$PLUGIN_ID> (can be overridden in L<holorc(5)>)

=item F</usr/share/holo/$PLUGIN_ID/> (must exist)

=item F</var/lib/holo/$PLUGIN_ID/> (will be created if does not exist)

=back

=head1 SEE ALSO

L<holorc(5)>

L<holo-build(8)> can optionally be used in conjunction with Holo to simplify
the package build process.

=head1 AUTHOR

Stefan Majewsky

Further documentation is available at the project homepage: http://holocm.org

Please report any issues and feature requests at GitHub: http://github.com/holocm/holo/issues

=cut
